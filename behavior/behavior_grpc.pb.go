// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: behavior.proto

package behavior

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BehaviorService_RecordBehavior_FullMethodName      = "/behavior.behaviorService/RecordBehavior"
	BehaviorService_BatchRecordBehavior_FullMethodName = "/behavior.behaviorService/BatchRecordBehavior"
	BehaviorService_GetBehavior_FullMethodName         = "/behavior.behaviorService/GetBehavior"
	BehaviorService_ListBehaviors_FullMethodName       = "/behavior.behaviorService/ListBehaviors"
	BehaviorService_DeleteBehavior_FullMethodName      = "/behavior.behaviorService/DeleteBehavior"
	BehaviorService_BatchDeleteBehavior_FullMethodName = "/behavior.behaviorService/BatchDeleteBehavior"
)

// BehaviorServiceClient is the client API for BehaviorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ============================================================
// behaviorService
// 行为数据管理服务，提供行为数据的记录、查询和删除功能
// ============================================================
type BehaviorServiceClient interface {
	// RecordBehavior 记录行为数据
	RecordBehavior(ctx context.Context, in *RecordBehaviorRequest, opts ...grpc.CallOption) (*RecordBehaviorResponse, error)
	// BatchRecordBehavior 批量记录行为数据
	BatchRecordBehavior(ctx context.Context, in *BatchRecordBehaviorRequest, opts ...grpc.CallOption) (*BatchRecordBehaviorResponse, error)
	// GetBehavior 根据ID获取行为数据详情
	GetBehavior(ctx context.Context, in *GetBehaviorRequest, opts ...grpc.CallOption) (*Behavior, error)
	// ListBehaviors 分页查询行为数据列表
	ListBehaviors(ctx context.Context, in *ListBehaviorsRequest, opts ...grpc.CallOption) (*ListBehaviorsResponse, error)
	// DeleteBehavior 删除行为数据
	DeleteBehavior(ctx context.Context, in *DeleteBehaviorRequest, opts ...grpc.CallOption) (*DeleteBehaviorResponse, error)
	// BatchDeleteBehavior 批量删除行为数据
	BatchDeleteBehavior(ctx context.Context, in *BatchDeleteBehaviorRequest, opts ...grpc.CallOption) (*BatchDeleteBehaviorResponse, error)
}

type behaviorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBehaviorServiceClient(cc grpc.ClientConnInterface) BehaviorServiceClient {
	return &behaviorServiceClient{cc}
}

func (c *behaviorServiceClient) RecordBehavior(ctx context.Context, in *RecordBehaviorRequest, opts ...grpc.CallOption) (*RecordBehaviorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordBehaviorResponse)
	err := c.cc.Invoke(ctx, BehaviorService_RecordBehavior_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviorServiceClient) BatchRecordBehavior(ctx context.Context, in *BatchRecordBehaviorRequest, opts ...grpc.CallOption) (*BatchRecordBehaviorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchRecordBehaviorResponse)
	err := c.cc.Invoke(ctx, BehaviorService_BatchRecordBehavior_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviorServiceClient) GetBehavior(ctx context.Context, in *GetBehaviorRequest, opts ...grpc.CallOption) (*Behavior, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Behavior)
	err := c.cc.Invoke(ctx, BehaviorService_GetBehavior_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviorServiceClient) ListBehaviors(ctx context.Context, in *ListBehaviorsRequest, opts ...grpc.CallOption) (*ListBehaviorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBehaviorsResponse)
	err := c.cc.Invoke(ctx, BehaviorService_ListBehaviors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviorServiceClient) DeleteBehavior(ctx context.Context, in *DeleteBehaviorRequest, opts ...grpc.CallOption) (*DeleteBehaviorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBehaviorResponse)
	err := c.cc.Invoke(ctx, BehaviorService_DeleteBehavior_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviorServiceClient) BatchDeleteBehavior(ctx context.Context, in *BatchDeleteBehaviorRequest, opts ...grpc.CallOption) (*BatchDeleteBehaviorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchDeleteBehaviorResponse)
	err := c.cc.Invoke(ctx, BehaviorService_BatchDeleteBehavior_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BehaviorServiceServer is the server API for BehaviorService service.
// All implementations must embed UnimplementedBehaviorServiceServer
// for forward compatibility.
//
// ============================================================
// behaviorService
// 行为数据管理服务，提供行为数据的记录、查询和删除功能
// ============================================================
type BehaviorServiceServer interface {
	// RecordBehavior 记录行为数据
	RecordBehavior(context.Context, *RecordBehaviorRequest) (*RecordBehaviorResponse, error)
	// BatchRecordBehavior 批量记录行为数据
	BatchRecordBehavior(context.Context, *BatchRecordBehaviorRequest) (*BatchRecordBehaviorResponse, error)
	// GetBehavior 根据ID获取行为数据详情
	GetBehavior(context.Context, *GetBehaviorRequest) (*Behavior, error)
	// ListBehaviors 分页查询行为数据列表
	ListBehaviors(context.Context, *ListBehaviorsRequest) (*ListBehaviorsResponse, error)
	// DeleteBehavior 删除行为数据
	DeleteBehavior(context.Context, *DeleteBehaviorRequest) (*DeleteBehaviorResponse, error)
	// BatchDeleteBehavior 批量删除行为数据
	BatchDeleteBehavior(context.Context, *BatchDeleteBehaviorRequest) (*BatchDeleteBehaviorResponse, error)
	mustEmbedUnimplementedBehaviorServiceServer()
}

// UnimplementedBehaviorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBehaviorServiceServer struct{}

func (UnimplementedBehaviorServiceServer) RecordBehavior(context.Context, *RecordBehaviorRequest) (*RecordBehaviorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordBehavior not implemented")
}
func (UnimplementedBehaviorServiceServer) BatchRecordBehavior(context.Context, *BatchRecordBehaviorRequest) (*BatchRecordBehaviorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchRecordBehavior not implemented")
}
func (UnimplementedBehaviorServiceServer) GetBehavior(context.Context, *GetBehaviorRequest) (*Behavior, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBehavior not implemented")
}
func (UnimplementedBehaviorServiceServer) ListBehaviors(context.Context, *ListBehaviorsRequest) (*ListBehaviorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBehaviors not implemented")
}
func (UnimplementedBehaviorServiceServer) DeleteBehavior(context.Context, *DeleteBehaviorRequest) (*DeleteBehaviorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBehavior not implemented")
}
func (UnimplementedBehaviorServiceServer) BatchDeleteBehavior(context.Context, *BatchDeleteBehaviorRequest) (*BatchDeleteBehaviorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteBehavior not implemented")
}
func (UnimplementedBehaviorServiceServer) mustEmbedUnimplementedBehaviorServiceServer() {}
func (UnimplementedBehaviorServiceServer) testEmbeddedByValue()                         {}

// UnsafeBehaviorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BehaviorServiceServer will
// result in compilation errors.
type UnsafeBehaviorServiceServer interface {
	mustEmbedUnimplementedBehaviorServiceServer()
}

func RegisterBehaviorServiceServer(s grpc.ServiceRegistrar, srv BehaviorServiceServer) {
	// If the following call pancis, it indicates UnimplementedBehaviorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BehaviorService_ServiceDesc, srv)
}

func _BehaviorService_RecordBehavior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordBehaviorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BehaviorServiceServer).RecordBehavior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BehaviorService_RecordBehavior_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BehaviorServiceServer).RecordBehavior(ctx, req.(*RecordBehaviorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BehaviorService_BatchRecordBehavior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRecordBehaviorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BehaviorServiceServer).BatchRecordBehavior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BehaviorService_BatchRecordBehavior_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BehaviorServiceServer).BatchRecordBehavior(ctx, req.(*BatchRecordBehaviorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BehaviorService_GetBehavior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBehaviorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BehaviorServiceServer).GetBehavior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BehaviorService_GetBehavior_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BehaviorServiceServer).GetBehavior(ctx, req.(*GetBehaviorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BehaviorService_ListBehaviors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBehaviorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BehaviorServiceServer).ListBehaviors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BehaviorService_ListBehaviors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BehaviorServiceServer).ListBehaviors(ctx, req.(*ListBehaviorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BehaviorService_DeleteBehavior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBehaviorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BehaviorServiceServer).DeleteBehavior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BehaviorService_DeleteBehavior_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BehaviorServiceServer).DeleteBehavior(ctx, req.(*DeleteBehaviorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BehaviorService_BatchDeleteBehavior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteBehaviorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BehaviorServiceServer).BatchDeleteBehavior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BehaviorService_BatchDeleteBehavior_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BehaviorServiceServer).BatchDeleteBehavior(ctx, req.(*BatchDeleteBehaviorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BehaviorService_ServiceDesc is the grpc.ServiceDesc for BehaviorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BehaviorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "behavior.behaviorService",
	HandlerType: (*BehaviorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordBehavior",
			Handler:    _BehaviorService_RecordBehavior_Handler,
		},
		{
			MethodName: "BatchRecordBehavior",
			Handler:    _BehaviorService_BatchRecordBehavior_Handler,
		},
		{
			MethodName: "GetBehavior",
			Handler:    _BehaviorService_GetBehavior_Handler,
		},
		{
			MethodName: "ListBehaviors",
			Handler:    _BehaviorService_ListBehaviors_Handler,
		},
		{
			MethodName: "DeleteBehavior",
			Handler:    _BehaviorService_DeleteBehavior_Handler,
		},
		{
			MethodName: "BatchDeleteBehavior",
			Handler:    _BehaviorService_BatchDeleteBehavior_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "behavior.proto",
}
