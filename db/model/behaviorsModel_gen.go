// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	behaviorsFieldNames          = builder.RawFieldNames(&Behaviors{}, true)
	behaviorsRows                = strings.Join(behaviorsFieldNames, ",")
	behaviorsRowsExpectAutoSet   = strings.Join(stringx.Remove(behaviorsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	behaviorsRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(behaviorsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cacheBehaviorBehaviorsIdPrefix = "cache:behavior:behaviors:id:"
)

type (
	behaviorsModel interface {
		Insert(ctx context.Context, data *Behaviors) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Behaviors, error)
		Update(ctx context.Context, data *Behaviors) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBehaviorsModel struct {
		sqlc.CachedConn
		table string
	}

	Behaviors struct {
		Id        int64        `db:"id"`         // 主键ID
		Key       string       `db:"key"`        // 行为标识键，用于区分不同类型的行为
		UserId    int64        `db:"user_id"`    // 用户ID，关联用户表
		Data      string       `db:"data"`       // 行为数据，以JSONB格式存储，支持复杂查询
		CreatedAt time.Time    `db:"created_at"` // 创建时间
		UpdatedAt time.Time    `db:"updated_at"` // 更新时间，通过触发器自动维护
		DeletedAt sql.NullTime `db:"deleted_at"` // 软删除时间，NULL表示未删除
	}
)

func newBehaviorsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultBehaviorsModel {
	return &defaultBehaviorsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"behavior"."behaviors"`,
	}
}

func (m *defaultBehaviorsModel) Delete(ctx context.Context, id int64) error {
	behaviorBehaviorsIdKey := fmt.Sprintf("%s%v", cacheBehaviorBehaviorsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, behaviorBehaviorsIdKey)
	return err
}

func (m *defaultBehaviorsModel) FindOne(ctx context.Context, id int64) (*Behaviors, error) {
	behaviorBehaviorsIdKey := fmt.Sprintf("%s%v", cacheBehaviorBehaviorsIdPrefix, id)
	var resp Behaviors
	err := m.QueryRowCtx(ctx, &resp, behaviorBehaviorsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", behaviorsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBehaviorsModel) Insert(ctx context.Context, data *Behaviors) (sql.Result, error) {
	behaviorBehaviorsIdKey := fmt.Sprintf("%s%v", cacheBehaviorBehaviorsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, behaviorsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Key, data.UserId, data.Data, data.DeletedAt)
	}, behaviorBehaviorsIdKey)
	return ret, err
}

func (m *defaultBehaviorsModel) Update(ctx context.Context, data *Behaviors) error {
	behaviorBehaviorsIdKey := fmt.Sprintf("%s%v", cacheBehaviorBehaviorsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, behaviorsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.Key, data.UserId, data.Data, data.DeletedAt)
	}, behaviorBehaviorsIdKey)
	return err
}

func (m *defaultBehaviorsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheBehaviorBehaviorsIdPrefix, primary)
}

func (m *defaultBehaviorsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", behaviorsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBehaviorsModel) tableName() string {
	return m.table
}
